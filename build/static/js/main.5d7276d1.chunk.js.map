{"version":3,"sources":["styles/global/GlobalStyle.ts","components/MoviePlaylist/MoviePlaylist.styles.ts","config/config.ts","components/MoviePlaylist/index.tsx","components/Header/Header.styles.ts","components/Header/index.tsx","components/HeroImage/HeroImage.styles.ts","components/HeroImage/index.tsx","components/Grid/Grid.styles.ts","components/Grid/index.tsx","components/Thumbnail/Thumbnail.styles.ts","components/Thumbnail/index.tsx","components/Spinner/index.tsx","components/Spinner/Spinner.styles.ts","components/SearchBar/SearchBar.styles.ts","images/search-icon.svg","components/SearchBar/index.tsx","components/Button/Button.styles.ts","components/Button/index.tsx","API/API.ts","helpers/helpers.ts","hooks/useHomeFetch.ts","components/Home.styles.ts","images/no_image.jpg","components/Home.tsx","components/BreadCrump/BreadCrump.styles.ts","components/BreadCrump/index.tsx","components/MovieInfo/MovieInfo.styles.ts","components/MovieInfo/index.tsx","components/Actor/Actor.styles.ts","components/Actor/index.tsx","components/Movie.tsx","hooks/useMovieFetch.ts","components/NotFound.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","div","Item","Poster","img","Title","span","ReleaseDate","RemoveButton","button","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","MoviePlayList","useState","movieData","setMovieData","useEffect","getItem","console","log","a","JSON","parse","localStorage","resp","length","map","item","src","movie_poster","alt","movie_title","differenceInDays","Date","fromUnixTime","Math","floor","movie_release_date","getTime","onClick","mId","items","filter","movie_id","setItem","stringify","removeFromPlaylist","style","color","Content","LogoImg","h1","MoviePlayListButton","customStyles","content","top","left","right","bottom","marginRight","transform","height","Modal","setAppElement","Header","modalIsOpen","setIsOpen","closeModal","to","isOpen","onRequestClose","contentLabel","float","fontWeight","borderRadius","padding","cursor","marginBottom","image","Text","HeroImage","title","text","Grid","header","children","Image","movieHeight","Info","Thumbnail","movieId","clickable","movieTitle","releaseDate","Spinner","SearchBar","setSearchTerm","state","setState","initial","useRef","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","e","currentTarget","value","Button","callback","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","success","sessionId","rateMovie","rating","isPersistedState","stateName","sessionState","sessionStorage","intialState","results","total_pages","total_results","AddToPlaylist","InPlaylist","Home","loading","setLoading","error","setEror","isLoadingMore","setIsLoadingMore","API","movies","prev","useHomeFetch","backdrop_path","original_title","overview","movie","poster_path","NoImage","id","release_date","some","m","mTittle","mPath","mReleaseDate","movieDetails","push","addToPlaylist","BreadCrump","backdrop","MovieInfo","className","vote_average","directors","director","name","credit_id","Actor","character","imageURL","Movie","setError","credits","crew","member","job","actors","cast","toString","useMovieFetch","useParams","actor","profile_path","NotFound","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d7276d1.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    :root{\n        --maxWidth: 1280px;\n        --white: #fff;\n        --lightGray: #eee;\n        --mediumGray: #353535;\n        --darkGray: #1c1c1c;\n        --fontSuperBig: 2.5rem;\n        --fontBig: 1.5rem;\n        --fontMedium: 1.1rem;\n        --fontSmall: 0.9rem;\n    }\n\n    *{\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n        text-decoration: none;\n    }\n    body{\n        font-family: font-family: 'Roboto', sans-serif;\n        h1{\n            font-size: 2rem;\n            font-weight: 600;\n            color: var(--white);  \n        }\n        h3{\n            font-size: 1.1rem;\n            font-weight: 600;\n        }\n        p{\n            font-size: 1rem;\n            color: var(--white);\n        }\n    }\n`;\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n    width: 500px;\r\n    @media screen and (max-width: 500px){\r\n        width: 300px;\r\n    }\r\n`\r\nexport const Item = styled.div`\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    width: 150px;\r\n    margin-bottom: 20px;\r\n    @media screen and (max-width: 500px){\r\n        width: 140px;\r\n    }\r\n`\r\nexport const Poster = styled.img`\r\n    height: 200px;\r\n    width: 150px;\r\n    @media screen and (max-width: 500px){\r\n        width: 140px;\r\n    }\r\n`\r\nexport const Title = styled.span`\r\n font-size: 14px;\r\n font-weight: 600;\r\n`\r\nexport const ReleaseDate = styled.span`\r\nfont-size: 14px;\r\nfont-weight: 400;\r\n`\r\nexport const RemoveButton = styled.button`\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    font-weight: 600;\r\n    padding: 2px;\r\n    margin-top: 4px;\r\n`","// Configuration for TMDB API\n// Developer API: https://developers.themoviedb.org/\n\nconst API_URL:string = \"https://api.themoviedb.org/3/\";\nconst API_KEY:string | undefined = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL:string = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL:string = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n\n// For login and voting: For future use\nconst REQUEST_TOKEN_URL:string = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL:string = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL:string = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL:string = \"http://image.tmdb.org/t/p/\";\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE:string = \"w1280\";\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE:string = \"w780\";\n\nexport {\n  API_URL,\n  API_KEY,\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n};\n","import { useState, useEffect } from \"react\";\r\nimport { Wrapper, Item, Poster, Title, ReleaseDate, RemoveButton } from \"./MoviePlaylist.styles\";\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../../config/config\";\r\nimport { differenceInDays, fromUnixTime } from \"date-fns\";\r\n\r\nexport type PlayList = {\r\n    movie_id: number;\r\n    movie_title: string;\r\n    movie_poster: string;\r\n    movie_release_date: number;\r\n};\r\n\r\nconst MoviePlayList: React.FC = () => {\r\n    const [movieData, setMovieData] = useState<PlayList[]>([]);\r\n\r\n    useEffect(() => {\r\n        getItem();\r\n        console.log('rendered')\r\n    }, []);\r\n\r\n    const getItem = async () => {\r\n        try {\r\n            const resp = await JSON.parse(localStorage.getItem('Playlist') as string);\r\n            setMovieData(resp);\r\n        } catch (e) {\r\n            console.log({ \"`Storage Util Error\\nGet Item:`\": e });\r\n        }\r\n\r\n    }\r\n\r\n    const removeFromPlaylist = (mId: number) => {\r\n        console.log(mId);\r\n        const items = movieData.filter((item: PlayList) => item.movie_id !== mId);\r\n        localStorage.setItem('Playlist', JSON.stringify(items)) as any;\r\n        getItem();\r\n    }\r\n    return (\r\n        <Wrapper>\r\n            {\r\n                movieData && movieData.length > 0 ? (movieData.map((item: PlayList) => (\r\n\r\n                    <Item key={item.movie_id}>\r\n                        <Poster src={`${IMAGE_BASE_URL}${POSTER_SIZE}${item.movie_poster}`} alt=\"movie-thumb\" />\r\n                        <Title>{item.movie_title}</Title>\r\n                        <ReleaseDate>Release date:{\" \"} {differenceInDays(new Date(), fromUnixTime(Math.floor(new Date(item.movie_release_date).getTime() / 1000)))}{\" \"} days ago</ReleaseDate>\r\n                        <RemoveButton onClick={() => removeFromPlaylist(item.movie_id)}>REMOVE</RemoveButton>\r\n                    </Item>\r\n                ))\r\n                ) : (\r\n                    <p style={{color:'#000'}}>You don't have playlist. Please add!</p>\r\n                )\r\n            }\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default MoviePlayList;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    background: var(--darkGray);\n    padding: 0 20px;\n    position: fixed;\n    z-index: 1000;\n    width:100%\n`;\n\nexport const Content = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    max-width: var(--maxWidth);\n    padding: 20px 0;\n    margin: 0 auto;\n`;\n\nexport const LogoImg = styled.h1`\n    width: 400px;\n    font-weight: 700;\n    font-size: 32px;\n    @media screen and (max-width: 500px){\n        width: 150px;\n        font-size:16px;\n    }\n`;\n\nexport const MoviePlayListButton = styled.button`\n    padding: 10px;\n    border-radius: 10px;\n    font-size:16px;\n    font-weight:bold;\n    background-color: #fff;\n    color: var(--darkGray);\n    cursor: pointer;\n    @media screen and (max-width: 500px){\n        width: 80px;\n        font-size:14px;\n        padding: 4px;\n    }\n`;\n\nexport const Modal = styled.div`\n    z-index: 2000 !important;\n`;\n\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Modal from 'react-modal';\nimport MoviePlayList from \"../MoviePlaylist\";\nimport { Wrapper, Content, LogoImg, MoviePlayListButton } from \"./Header.styles\";\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    height: '500px',\n  },\n};\n\nModal.setAppElement('#root');\n\nconst Header: React.FC = () => {\n  let subtitle: string;\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  return (\n    <Wrapper>\n      <Content>\n        <Link to=\"/\">\n          <LogoImg >EL.MENDY MOVIES</LogoImg>\n        </Link>\n        <MoviePlayListButton onClick={openModal}>My Playlist</MoviePlayListButton>\n      </Content>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        <button onClick={closeModal} style={{ float: 'right', fontWeight: 'bold', borderRadius: '6px', padding: '2px', cursor: 'pointer' }}>close</button>\n        <h3 style={{ marginBottom: '20px' }}>My Movie Playlist</h3>\n        <MoviePlayList />\n      </Modal>\n    </Wrapper>\n  );\n};\n\nexport default Header;\n","import styled from \"styled-components\";\n\ntype Props = {\n  image: string;\n}\n\nexport const Wrapper = styled.div<Props>`\n  background: linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 41%,\n      rgba(0, 0, 0, 0.65) 100%\n    ),\n    url(${({ image }) => image}), var(--darkGray);\n  background-size: 100%, cover;\n  height: 500px;\n  position: relative;\n  background-position: center;\n  animation: animateHeroImage 1s;\n\n  @keyframes animateHeroImage {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nexport const Text = styled.div`\n  z-index: 100;\n  max-width: 700px;\n  position: absolute;\n  bottom: 30px;\n  min-height: 100px;\n  color: var(--white);\n\n  h1 {\n    font-size: var(--fontSuperBig);\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontBig);\n    }\n  }\n\n  p {\n    margin-top: 10px;\n    font-size: var(--fontMedium);\n    color: var(--lightGray);\n\n    @media screen and (max-width: 720px) {\n      fonts-size: var(--fontSmall);\n    }\n  }\n\n  @media screen and (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n","import { Wrapper, Content, Text } from \"./HeroImage.styles\";\n\ntype Props = {\n  image: string;\n  title: string;\n  text: string;\n}\n\nconst HeroImage: React.FC<Props> = ({ image, title, text }) => {\n  return (\n    <Wrapper image={image}>\n      <Content>\n        <Text>\n          <h1>{title}</h1>\n          <p>{text}</p>\n        </Text>\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default HeroImage;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  padding: 0 20px;\n\n  h1 {\n    margin-top: 25px;\n    color: var(--mediumGray);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n\nexport const Content = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-gap: 2rem;\n    margin-top: 25px;\n`;\n\n","import { Wrapper, Content } from \"./Grid.styles\";\n\ntype Props = {\n  header: string;\n  children: any;\n}\n\nconst Grid: React.FC<Props> = ({ header, children }) => {\n  return (\n    <>\n      <Wrapper>\n        <h1>{header}</h1>\n        <Content>{children}</Content>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Grid;\n","import styled from \"styled-components\";\n\n// Types\ntype Props = {\n  movieHeight?: boolean;\n}\n\nexport const Image = styled.img<Props>`\n  width: 100%;\n  max-width: 720px;\n  border-radius: 20px;\n  transition: all 0.3s;\n  object-fit: cover;\n  height: ${({ movieHeight }) => (movieHeight ? `520px` : `auto`)};\n  animation: animateThumb 0.5s;\n  position: relative;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  @keyframes animateThumb {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Info = styled.div`\n  top: 5%;\n  margin: 0px 10px;\n  position: absolute;\n  background: #000;\n  width: 90%;\n  opacity: 0.6;\n  font-weight: 700;\n  color: #fff;\n  padding: 2px;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n` \nexport const Title = styled.span`\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const ReleaseDate = styled.span`\n  font-size: 16px;\n`;\n\n\n\n\n","import { differenceInDays, fromUnixTime } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport { Image, Info, Title, ReleaseDate } from \"./Thumbnail.styles\";\n\ntype Props = {\n  image: string;\n  movieId?: number;\n  clickable: boolean;\n  movieHeight?: boolean;\n  movieTitle: string;\n  releaseDate: string;\n}\n\nconst Thumbnail: React.FC<Props> = ({ image, movieId, clickable, movieHeight, movieTitle, releaseDate }) => {\n  \n  return (\n    <>\n      {clickable ? (\n          <Link to={`/${movieId}`}>\n            <Image src={image} alt=\"movie-thumb\" movieHeight={movieHeight} />\n            <Info>\n              <Title>{movieTitle}</Title>\n              <ReleaseDate>Release date:{\" \"} {differenceInDays(new Date(), fromUnixTime(Math.floor(new Date(releaseDate).getTime() / 1000)))}{\" \"} days ago</ReleaseDate>\n            </Info>\n          </Link>\n      ) : (\n\n        <Image src={image} alt=\"movie-thumb\" movieHeight={movieHeight} />\n\n\n      )}\n    </>\n  );\n};\n\nexport default Thumbnail;\n","import { Spinner } from \"./Spinner.styles\";\nexport default Spinner;\n","import styled from \"styled-components\";\n\nexport const Spinner = styled.div`\n  border: 5px solid var(--lightGray);\n  border-top: 5px solid var(--mediumGray);\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 0.8s linear infinite;\n  margin: 20px auto;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 20px;\n  height: 70px;\n  background: var(--darkGray);\n`;\n\nexport const Content = styled.div`\n    position: relative;\n    max-width: var(--maxWidth);\n    width: 100%;\n    height: 45px;\n    background: var(--mediumGray);\n    border-radius: 40px;\n    color: var(--white);\n\n    img{\n        position: absolute;\n        left: 17px;\n        top: 10px;\n        width: 25px;\n    }\n    input{\n        font-size: var(--fontMedium);\n        margin: 3px 0;\n        padding: 0 0 0 60px;\n        width: 95%;\n        height: 40px;\n        border: 0;\n        background: transparent;\n        border-radius: 40px;\n        color: var(--white);\n\n        :focus{\n            outline: none;\n        }\n    }\n`;","export default __webpack_public_path__ + \"static/media/search-icon.82b9d96a.svg\";","import { useState, useEffect, useRef } from \"react\";\nimport { Wrapper, Content } from \"./SearchBar.styles\";\n\nimport searchIcon from \"../../images/search-icon.svg\";\n\ntype Props = {\n  setSearchTerm: React.Dispatch<React.SetStateAction<string>>\n}\n\nconst SearchBar: React.FC<Props> = ({ setSearchTerm }) => {\n  const [state, setState] = useState(\"\");\n  const handleChange = (e:any) => {\n    setState(e.currentTarget.value);\n  };\n\n  const initial = useRef(true);\n\n  useEffect(() => {\n    if (initial.current) {\n      initial.current = false;\n      return;\n    }\n    const timer = setTimeout(() => {\n      setSearchTerm(state);\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [setSearchTerm, state]);\n\n  return (\n    <>\n      <Wrapper>\n        <Content>\n          <img src={searchIcon} alt=\"search-icon\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search Movie\"\n            onChange={handleChange}\n            value={state}\n          />\n        </Content>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default SearchBar;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.button`\n  display: block;\n  background: var(--darkGray);\n  width: 25%;\n  min-width: 200px;\n  height: 60px;\n  border-radius: 30px;\n  color: var(--white);\n  border: 0;\n  font-size: var(--fontBig);\n  margin: 20px auto;\n  transform: all 0.3s;\n  outline: none;\n  cursor: pointer;\n\n  :hover {\n    opacity: 0.8;\n  }\n`;\n","import { Wrapper } from \"./Button.styles\";\n\ntype Props = {\n  children: any;\n  callback: () => void;\n}\n\nconst Button: React.FC<Props> = ({ children, callback }) => {\n  return (\n    <>\n      <Wrapper type=\"button\" onClick={callback}>\n        {children}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Button;\n","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n} from \"../config/config\";\n\nconst defaultConfig = {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n};\n\nexport type Movie = {\n  backdrop_path: string;\n  id: number;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  title: string;\n  vote_average: number;\n  vote_count: number;\n  budget: number;\n  runtime: number;\n  revenue: number;\n  release_date: string;\n};\n\nexport type Movies = {\n  page: number;\n  results: Movie[];\n  total_pages: number;\n  total_results: number;\n};\n\nexport type Cast = {\n  character: string;\n  credit_id: string;\n  name: string;\n  profile_path: string;\n};\n\nexport type Crew = {\n  job: string;\n  name: string;\n  credit_id: number;\n};\n\nexport type Credits = {\n  id: number;\n  cast: Cast[];\n  crew: Crew[];\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm:string, page: number): Promise<Movies> => {\n    const endpoint:string = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async (movieId: string): Promise<Movie> => {\n    const endpoint:string = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async (movieId: string): Promise<Credits> => {\n    const creditsEndpoint:string = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n\n  // LOGIN: FOR FUTURE IMPLEMENTATION\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken: string, username:string, password:string) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken,\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData),\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken }),\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId: number, movieId:number, value:string) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value }),\n      })\n    ).json();\n\n    return rating;\n  },\n};\n\nexport default apiSettings;\n","// Convert time to hours and minutes: for future development\nexport const calcTime = (time: number):string => {\n  const hours: number = Math.floor(time / 60);\n  const mins:number = time % 60;\n  return `${hours}h ${mins}m`;\n};\n\n// Convert a number to money formatting: for future development\nexport const convertMoney = (money: number):string => {\n  const formatValue: Intl.NumberFormat = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"GHS\",\n    minimumFractionDigits: 0,\n  });\n  return formatValue.format(money);\n};\n\n// Session Storage\nexport const isPersistedState = (stateName:string):any => {\n  const sessionState = sessionStorage.getItem(stateName);\n  return sessionState && JSON.parse(sessionState);\n}\n","import { useState, useEffect } from \"react\";\n// API\nimport API, {Movie} from \"../API/API\";\n// Helpers\nimport { isPersistedState } from \"../helpers/helpers\";\n\nconst intialState = {\n  page: 0,\n  results: [] as Movie[],\n  total_pages: 0,\n  total_results: 0,\n};\n\nexport const useHomeFetch = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [state, setState] = useState(intialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setEror] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const fetchMovies = async (page:number, searchTerm = \"\") => {\n    try {\n      setEror(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      //   console.log(movies);\n      setState((prev) => ({\n        ...movies,\n        results:\n          page > 1 ? [...prev.results, ...movies.results] : [...movies.results],\n      }));\n    } catch (error) {\n      setEror(true);\n    }\n    setLoading(false);\n  };\n\n  // Initial\n  useEffect(() => {\n    fetchMovies(1);\n  }, []);\n\n  // Search\n  useEffect(() => {\n    if (!searchTerm) {\n      const sessionState = isPersistedState(\"homeState\");\n\n      if (sessionState) {\n        console.log(\"GRABBING FROM SESSION STORAGE\");\n        setState(sessionState);\n        return;\n      }\n    }\n    setState(intialState);\n    fetchMovies(1, searchTerm);\n  }, [searchTerm]);\n\n  // Load More Button\n  useEffect(() => {\n    if (!isLoadingMore) {\n      return;\n    }\n    fetchMovies(state.page + 1, searchTerm);\n    setIsLoadingMore(false);\n  }, [isLoadingMore, searchTerm, state.page]);\n\n  // Write to sessionStorage\n  useEffect(() => {\n    if (!searchTerm) {\n      return sessionStorage.setItem(\"homeState\", JSON.stringify(state));\n    }\n  }, [searchTerm, state]);\n\n  return { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore };\n};\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport const AddToPlaylist = styled.button`\r\n  font-size: 16px;\r\n  text-align: center;\r\n  width: 200px;\r\n  font-weight: 600;\r\n  padding: 4px;\r\n  border-radius: 10px;\r\n  background: var(--lightGray);\r\n  color: var(--darkGray);\r\n  cursor: pointer;\r\n  margin-top: 6px;\r\n  border-radius: 1px solid #353535;\r\n  border: 1px solid var(--darkGray);\r\n`\r\nexport const InPlaylist = styled.button`\r\n  font-size: 16px;\r\n  text-align: center;\r\n  width: 200px;\r\n  font-weight: 600;\r\n  padding: 4px;\r\n  border-radius: 10px;\r\n  background: var(--mediumGray);\r\n  color: var(--lightGray);\r\n  cursor: pointer;\r\n  margin-top: 6px;\r\n  border-radius: 1px solid #353535;\r\n  cursor: not-allowed;\r\n  border: 1px solid var(--mediumGray);\r\n`","export default __webpack_public_path__ + \"static/media/no_image.45d45293.jpg\";","import { useState } from \"react\";\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from \"../config/config\";\nimport HeroImage from \"./HeroImage\";\nimport Grid from \"./Grid\";\nimport Thumbnail from \"./Thumbnail\";\nimport Spinner from \"./Spinner\";\nimport SearchBar from \"./SearchBar\";\nimport Button from \"./Button\";\nimport { useHomeFetch } from \"../hooks/useHomeFetch\";\nimport { AddToPlaylist, Wrapper, InPlaylist } from \"./Home.styles\";\nimport NoImage from \"../images/no_image.jpg\";\n\n\nconst Home: React.FC = () => {\n  const [disabled, setDisabled] = useState(false);\n  const movieData = JSON.parse(localStorage.getItem('Playlist') as string) || [];\n  const { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore } = useHomeFetch();\n\n  console.log(state);\n\n  if (error) {\n    return <h1>Something Went Wrong...</h1>;\n  }\n\n  const addToPlaylist = (mId: number, mTittle: string, mPath: string, mReleaseDate: string): void => {\n    console.log(mId);\n\n    const movieDetails = {\n      movie_id: mId,\n      movie_title: mTittle,\n      movie_poster: mPath,\n      movie_release_date: mReleaseDate\n    };\n    movieData.push(movieDetails);\n    localStorage.setItem('Playlist', JSON.stringify(movieData));\n    \n    //reload page to show disabled button\n  }\n\n  return (\n    <>\n      {!searchTerm && state.results[0] ? (\n        <HeroImage\n          image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\n          title={state.results[0].original_title}\n          text={state.results[0].overview}\n        />\n      ) : null}\n\n\n      <SearchBar setSearchTerm={setSearchTerm}></SearchBar>\n      <Grid header={searchTerm ? \"Search Result\" : \"Popular Movies\"}>\n      \n        {state.results.map(movie => (\n          <Wrapper>\n            <Thumbnail\n              key={movie.id}\n              clickable\n              image={\n                movie.poster_path\n                  ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\n                  : NoImage\n              }\n              movieHeight={false}\n              movieId={movie.id}\n              movieTitle={movie.title}\n              releaseDate={movie.release_date}\n            />\n            {\n              !movieData.some((m: any) => m.movie_id === movie.id) ? (\n                <AddToPlaylist onClick={() => addToPlaylist(movie.id, movie.title, movie.poster_path, movie.release_date)}>ADD TO PLAYLIST</AddToPlaylist>\n              ) : (\n                <InPlaylist>In Playlist</InPlaylist>\n              )\n            }\n          </Wrapper>\n        ))}\n      </Grid>\n\n      {loading && <Spinner />}\n\n      {state.page < state.total_pages && !loading && (\n        <Button callback={() => setIsLoadingMore(true)}>Load More</Button>\n      )}\n    </>\n  );\n};\nexport default Home;\n\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 50px;\n    background: var(--mediumGray);\n    color: var(--white);\n`;\n\nexport const Content = styled.div`\n    display: flex;\n    width: 100%;\n    max-width: var(--maxWidth);\n    padding: 0 20px;\n\n    span{\n        font-size: var(--fontMedium);\n        color: var(--white);\n        padding-right: 10px;\n\n        @media screen and (max-width: 760px){\n            font-size: var(--fontSmall);\n        }\n    }\n`;","import { Link } from \"react-router-dom\";\nimport { Wrapper, Content } from \"./BreadCrump.styles\";\n\ntype Props = {\n  movieTitle?: string;\n}\n\nconst BreadCrump: React.FC<Props> = ({ movieTitle }) => {\n  return (\n    <>\n      <Wrapper>\n        <Content>\n          <Link to=\"/\">\n            <span>Home</span>\n          </Link>\n          <span>|</span>\n          <span>{movieTitle}</span>\n        </Content>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default BreadCrump;\n","import styled from \"styled-components\";\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from \"../../config/config\";\n\n// Types\ntype Props = {\n  backdrop: string;\n}\n\nexport const Wrapper = styled.div<Props>`\n  background: ${({ backdrop }) =>\n    backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : \"#000\"};\n  background-size: cover;\n  background-position: center;\n  padding: 40px 20px;\n  animation: animateMovieInfo 1s;\n  @keyframes animateMovieInfo {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  background: rgba(0, 0, 0, 0.7);\n  border-radius: 20px;\n  @media screen and (max-width: 768px) {\n    display: block;\n    max-height: none;\n  }\n`;\n\nexport const Text = styled.div`\n  width: 100%;\n  padding: 60px;\n  color: var(--white);\n  overflow: hidden;\n\n  .rating-directors {\n    display: flex;\n    justify-content: flex-start;\n    padding: 30px 0px;\n  }\n  .score {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 35px;\n    height: 35px;\n    background: #fff;\n    color: #000;\n    font-weight: 800;\n    border-radius: 50%;\n    margin-left: 12px;\n  }\n  .director {\n    margin: 0 0 0 80px;\n    p {\n      margin: 0;\n      padding: 5px 0px;\n    }\n  }\n  h1 {\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n  h3 {\n    padding-top: 20px;\n    padding-bottom: 10px;\n  }\n`;\n","import React from \"react\";\n\n// Components\nimport Thumbnail from \"../Thumbnail\";\n\n// Config\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../../config/config\";\n\n// Fallback Image\nimport NoImage from \"../../images/no_image.jpg\";\n\n// Styles\nimport { Wrapper, Content, Text } from \"./MovieInfo.styles\";\n// import { Movie } from '../../API/API';\n\n// Types\n// Types\nimport { MovieState } from '../../hooks/useMovieFetch';\n\ntype Props = {\n  movie: MovieState;\n}\n\nconst MovieInfo:React.FC<Props> = ({ movie }) => (\n  <Wrapper backdrop={movie.backdrop_path}>\n    <Content>\n      <Thumbnail\n        image={\n          movie.poster_path\n            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\n            : NoImage\n        }\n        movieHeight={true}\n        clickable={false}\n        movieTitle={movie.original_title}\n        releaseDate={movie.release_date}\n      />\n      <Text>\n        <h1>{movie.title}</h1>\n        <h3>PLOT</h3>\n        <p>{movie.overview}</p>\n\n        <div className=\"rating-directors\">\n          <div>\n            <h3>RATING</h3>\n            <div className=\"score\">{movie.vote_average}</div>\n          </div>\n          <div className=\"director\">\n            <h3>DIRECTOR{movie.directors.length > 1 ? \"S\" : \"\"}</h3>\n            {movie.directors.map((director) => (\n              <p key={director.credit_id}>{director.name}</p>\n            ))}\n          </div>\n        </div>\n      </Text>\n    </Content>\n  </Wrapper>\n);\n\nexport default MovieInfo;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    color: var(--white);\n    background: var(--darkGray);\n    border-radius: 20px;\n    padding: 5px;\n    text-align: center;\n\n    h3{\n        margin: 10px 0 0 0;\n    }\n\n    p{\n        margin: 5px 0px;\n    }\n`;\nexport const Image = styled.img`\n    display: block;\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    border-radius: 15px;\n`;","import { Wrapper, Image } from \"./Actor.styles\";\n\ntype Props = {\n  name: string;\n  character: string;\n  imageURL: string;\n}\n\nconst Actor: React.FC<Props> = ({ name, character, imageURL }) => {\n  return (\n    <>\n      <Wrapper>\n        <Image src={imageURL} alt=\"actor-thumb\" />\n        <h3>{name}</h3>\n        <p>{character}</p>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Actor;\n","import { useParams } from 'react-router-dom';\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config/config';\nimport BreadCrumb from './BreadCrump';\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport MovieInfo from './MovieInfo';\nimport Actor from './Actor';\nimport { useMovieFetch } from '../hooks/useMovieFetch';\nimport NoImage from '../images/no_image.jpg';\n\nconst Movie: React.FC = () => {\n  const { movieId } = useParams();\n\n  const { state: movie, loading, error } = useMovieFetch(movieId);\n\n  if (loading) {return <Spinner />;}\n  if (error) return <div>Something went wrong...</div>;\n\n  return (\n    <>\n      <MovieInfo movie={movie} />\n      <BreadCrumb movieTitle={movie.title} />\n      <Grid header='Actors'>\n        {movie.actors.map(actor => (\n          <Actor\n            key={actor.credit_id}\n            name={actor.name}\n            character={actor.character}\n            imageURL={\n              actor.profile_path\n                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\n                : NoImage\n            }\n          />\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default Movie;","import { useState, useEffect } from \"react\";\nimport API, { Movie, Cast , Crew} from \"../API/API\";\nimport { isPersistedState } from \"../helpers/helpers\";\nexport type MovieState = Movie & { actors: Cast[]; directors: Crew[] };\n\nexport const useMovieFetch = (movieId: string | any) => {\n  const [state, setState] = useState<MovieState>({} as MovieState);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n\n        const movie = await API.fetchMovie(movieId);\n        const credits = await API.fetchCredits(movieId);\n        // Get directors only\n        const directors = credits.crew.filter(\n          member => member.job === 'Director'\n        );\n\n        setState({\n          ...movie,\n          actors: credits.cast,\n          directors\n        });\n\n        setLoading(false);\n      } catch (error) {\n        setError(true);\n      }\n    };\n\n    const sessionState = isPersistedState(movieId.toString());\n\n    if (sessionState) {\n      setState(sessionState);\n      setLoading(false);\n      return;\n    }\n\n    fetchMovie();\n  }, [movieId]);\n\n  // Write to sessionStorage\n  useEffect(() => {\n    sessionStorage.setItem(movieId.toString(), JSON.stringify(state));\n  }, [movieId, state]);\n\n  return { state, loading, error };\n};","import React from \"react\";\n\nconst NotFound: React.FC = () => {\n    return (\n        <div>\n            Not Found\n        </div>\n    )\n}\n\nexport default NotFound;","import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport { GlobalStyle } from \"./styles/global/GlobalStyle\";\r\nimport Header from \"./components/Header\";\r\nimport Home from \"./components/Home\";\r\nimport Movie from \"./components/Movie\";\r\nimport NotFound from \"./components/NotFound\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Header />\r\n        <Routes>\r\n          <Route path=\"/\" element={<Home />} />\r\n          <Route path=\"/:movieId\" element={<Movie />} />\r\n          <Route path=\"/*\" element={<NotFound />} />\r\n        </Routes>\r\n        <GlobalStyle />\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}